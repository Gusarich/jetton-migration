#include "imports/stdlib.fc";
#include "opcodes.fc";
#include "params.fc";
#include "jetton-utils.fc";

;; 0.05 ton
const int ton_for_fee = 50000000;

global slice old_jetton_wallet;
global slice new_jetton_wallet;

() load_data() impure inline {
    slice ds = get_data().begin_parse();
    slice old_jetton_minter = ds~load_msg_addr();
    slice new_jetton_minter = ds~load_msg_addr();
    cell old_wallet_code = ds~load_ref();
    cell new_wallet_code = ds~load_ref();

    old_jetton_wallet = calculate_user_jetton_wallet_address(my_address(), old_jetton_minter, old_wallet_code);
    new_jetton_wallet = calculate_user_jetton_wallet_address(my_address(), new_jetton_minter, new_wallet_code);
}

() transfer(int amount, int query_id, slice recipient) impure {
    send_raw_message(begin_cell()
        .store_uint(0x18, 6)
        .store_slice(new_jetton_wallet)
        .store_coins(ton_for_fee * 2)
        .store_uint(1, 1 + 4 + 4 + 64 + 32 + 1 + 1)
        .store_ref(begin_cell()
            .store_uint(op::transfer, 32)
            .store_uint(query_id, 64)
            .store_coins(amount)
            .store_slice(recipient)
            .store_slice(recipient)
            .store_uint(0, 1)
            .store_coins(ton_for_fee)
            .store_uint(0, 1)
        .end_cell())
    .end_cell(), 1);
}

() burn(int amount, int query_id) impure {
    send_raw_message(begin_cell()
        .store_uint(0x18, 6)
        .store_slice(old_jetton_wallet)
        .store_coins(ton_for_fee)
        .store_uint(1, 1 + 4 + 4 + 64 + 32 + 1 + 1)
        .store_ref(begin_cell()
            .store_uint(op::burn, 32)
            .store_uint(query_id, 64)
            .store_coins(amount)
            .store_slice(my_address())
            .store_uint(0, 1)
        .end_cell())
    .end_cell(), 1);
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if ((in_msg_body.slice_bits() == 0)) {
        return (); ;; ignore empty messages / messages with not enough value
    }

    throw_if(505, msg_value < ton_for_fee * 4);

    load_data();
    slice cs = in_msg_full.begin_parse();

    int flags = cs~load_uint(4);
    slice sender = cs~load_msg_addr();
    int op = in_msg_body~load_uint(32);
    if ((flags & 1) | (~ equal_slices(sender, old_jetton_wallet)) | (op != op::transfer_notification)) {
        return (); ;; ignore bounced messages / messages not from old_jetton_wallet / not transfer notifications
    }

    int query_id = in_msg_body~load_uint(64);
    int amount = in_msg_body~load_coins();
    in_msg_body~load_msg_addr();
    in_msg_body~skip_bits(1);
    slice recipient = in_msg_body;
    
    transfer(amount, query_id, recipient);
    burn(amount, query_id);
    send_raw_message(begin_cell()
        .store_uint(0x18, 6)
        .store_slice(recipient)
        .store_coins(my_balance - ton_for_fee * 4)
        .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
    .end_cell(), 0);
}

(slice, slice) get_contract_data() method_id {
    load_data();
    return (old_jetton_wallet, new_jetton_wallet);
}